from PyQt5 import QtCore, QtGui, QtWidgets

import database

SecondaryColor = 103, 76, 245

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("ExcelFrame")
        MainWindow.resize(700, 550)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(683, 334))
        MainWindow.setStyleSheet("background-color: rgb(21, 0, 42);\n"
"color: rgb(255, 255, 255);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setEnabled(True)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.LeftMenu = QtWidgets.QVBoxLayout()
        self.LeftMenu.setObjectName("LeftMenu")
        self.Name_Icon = QtWidgets.QHBoxLayout()
        self.Name_Icon.setObjectName("Name_Icon")
        self.Icon = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Icon.sizePolicy().hasHeightForWidth())
        self.Icon.setSizePolicy(sizePolicy)
        self.Icon.setMinimumSize(QtCore.QSize(48, 48))
        self.Icon.setMaximumSize(QtCore.QSize(48, 48))
        self.Icon.setText("")
        self.Icon.setPixmap(QtGui.QPixmap("ExcelFrame.png"))
        self.Icon.setScaledContents(True)
        self.Icon.setObjectName("Icon")
        self.Name_Icon.addWidget(self.Icon)
        self.Name = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Name.sizePolicy().hasHeightForWidth())
        self.Name.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Shree Devanagari 714")
        font.setPointSize(30)
        self.Name.setFont(font)
        self.Name.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.Name.setObjectName("Name")
        self.Name_Icon.addWidget(self.Name)
        self.LeftMenu.addLayout(self.Name_Icon)
        self.AAll = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Shree Devanagari 714")
        font.setPointSize(15)
        self.AAll.setFont(font)
        self.AAll.setStyleSheet("background-color: rgb(103, 76, 245);")
        self.AAll.setObjectName("AAll")
        self.LeftMenu.addWidget(self.AAll)
        self.BFrames = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.BFrames.sizePolicy().hasHeightForWidth())
        self.BFrames.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("Shree Devanagari 714")
        font.setPointSize(15)
        self.BFrames.setFont(font)
        self.BFrames.setStyleSheet("background-color: rgb(103, 76, 245);")
        self.BFrames.setObjectName("BFrames")
        self.LeftMenu.addWidget(self.BFrames)
        self.CPrimary = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Shree Devanagari 714")
        font.setPointSize(15)
        self.CPrimary.setFont(font)
        self.CPrimary.setStyleSheet("background-color: rgb(103, 76, 245);")
        self.CPrimary.setObjectName("CPrimary")
        self.LeftMenu.addWidget(self.CPrimary)
        self.DSecondary = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Shree Devanagari 714")
        font.setPointSize(15)
        self.DSecondary.setFont(font)
        self.DSecondary.setStyleSheet("background-color: rgb(103, 76, 245);")
        self.DSecondary.setObjectName("DSecondary")
        self.LeftMenu.addWidget(self.DSecondary)
        self.EMelee = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Shree Devanagari 714")
        font.setPointSize(15)
        self.EMelee.setFont(font)
        self.EMelee.setStyleSheet("background-color: rgb(103, 76, 245);")
        self.EMelee.setObjectName("EMelee")
        self.LeftMenu.addWidget(self.EMelee)
        self.FCompanions = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Shree Devanagari 714")
        font.setPointSize(15)
        font.setBold(False)
        font.setWeight(50)
        self.FCompanions.setFont(font)
        self.FCompanions.setStyleSheet("background-color: rgb(103, 76, 245);")
        self.FCompanions.setObjectName("FCompanions")
        self.LeftMenu.addWidget(self.FCompanions)
        self.GArchwing = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Shree Devanagari 714")
        font.setPointSize(15)
        self.GArchwing.setFont(font)
        self.GArchwing.setStyleSheet("background-color: rgb(103, 76, 245);")
        self.GArchwing.setObjectName("GArchwing")
        self.LeftMenu.addWidget(self.GArchwing)
        self.HOperator = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Shree Devanagari 714")
        font.setPointSize(15)
        self.HOperator.setFont(font)
        self.HOperator.setStyleSheet("background-color: rgb(103, 76, 245);")
        self.HOperator.setObjectName("HOperator")
        self.LeftMenu.addWidget(self.HOperator)
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Shree Devanagari 714")
        font.setPointSize(15)
        self.comboBox.setFont(font)
        self.comboBox.setStyleSheet("background-color: rgb(103, 76, 245);")
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.LeftMenu.addWidget(self.comboBox)
        self.SaveChanges = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Shree Devanagari 714")
        font.setPointSize(15)
        self.SaveChanges.setFont(font)
        self.SaveChanges.setStyleSheet("background-color: rgb(59, 0, 137);")
        self.SaveChanges.setObjectName("SaveChanges")
        self.LeftMenu.addWidget(self.SaveChanges)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.LeftMenu.addItem(spacerItem)
        self.horizontalLayout.addLayout(self.LeftMenu)
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"color: rgb(0, 0, 0);")
        self.tableWidget.setProperty("showDropIndicator", True)
        self.tableWidget.setDragEnabled(False)
        self.tableWidget.setObjectName("tableWidget")
        self.equipments = []
        self.horizontalLayout.addWidget(self.tableWidget)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setTabOrder(self.AAll, self.BFrames)
        MainWindow.setTabOrder(self.BFrames, self.CPrimary)
        MainWindow.setTabOrder(self.CPrimary, self.DSecondary)
        MainWindow.setTabOrder(self.DSecondary, self.EMelee)
        MainWindow.setTabOrder(self.EMelee, self.FCompanions)
        MainWindow.setTabOrder(self.FCompanions, self.GArchwing)
        MainWindow.setTabOrder(self.GArchwing, self.HOperator)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.Name.setText(_translate("MainWindow", "ExcelFrame"))
        self.AAll.setText(_translate("MainWindow", "All"))
        self.AAll.setShortcut(_translate("MainWindow", "1"))
        self.BFrames.setText(_translate("MainWindow", "Frames"))
        self.BFrames.setShortcut(_translate("MainWindow", "2"))
        self.CPrimary.setText(_translate("MainWindow", "Primary Weapon"))
        self.CPrimary.setShortcut(_translate("MainWindow", "3"))
        self.DSecondary.setText(_translate("MainWindow", "Secondary Weapon"))
        self.DSecondary.setShortcut(_translate("MainWindow", "4"))
        self.EMelee.setText(_translate("MainWindow", "Melee Weapon"))
        self.EMelee.setShortcut(_translate("MainWindow", "5"))
        self.FCompanions.setText(_translate("MainWindow", "Companions and Sentinels"))
        self.FCompanions.setShortcut(_translate("MainWindow", "6"))
        self.GArchwing.setText(_translate("MainWindow", "Archwing and Other"))
        self.GArchwing.setShortcut(_translate("MainWindow", "7"))
        self.HOperator.setText(_translate("MainWindow", "Amps"))
        self.HOperator.setShortcut(_translate("MainWindow", "8"))
        self.comboBox.setItemText(0, _translate("MainWindow", "all"))
        self.comboBox.setItemText(1, _translate("MainWindow", "MR\'ed"))
        self.comboBox.setItemText(2, _translate("MainWindow", "unMR\'ed"))
        self.SaveChanges.setText(_translate("MainWindow", "Apply  changes"))

        self.AAll.clicked.connect(lambda: self.show_equipment(database.get_items(True, self.comboBox.currentText())))
        self.BFrames.clicked.connect(lambda: self.show_equipment(database.get_items(False, self.comboBox.currentText(),'warframe')))
        self.CPrimary.clicked.connect(lambda: self.show_equipment(database.get_items(False, self.comboBox.currentText(), 'primary')))
        self.DSecondary.clicked.connect(lambda: self.show_equipment(database.get_items(False, self.comboBox.currentText(), 'secondary')))
        self.EMelee.clicked.connect(lambda: self.show_equipment(database.get_items(False, self.comboBox.currentText(), 'melee')))
        self.FCompanions.clicked.connect(lambda: self.show_equipment(database.get_items(False, self.comboBox.currentText(), 'companion')))
        self.GArchwing.clicked.connect(lambda: self.show_equipment(database.get_items(False, self.comboBox.currentText(),'archwing')))
        self.HOperator.clicked.connect(lambda: self.show_equipment(database.get_items(False, self.comboBox.currentText(),'amp')))
        self.SaveChanges.clicked.connect(self.apply)


    def show_equipment(self, args):
        equipments = args
        self.tableWidget.clear()
        self.tableWidget.setColumnCount(len(equipments[0]))
        self.tableWidget.setHorizontalHeaderLabels([title for title in ("id","MRed","name","category")])
        self.tableWidget.setRowCount(0)
        for i, equipment in enumerate(equipments):
            self.tableWidget.setRowCount(self.tableWidget.rowCount()+1)
            for j, elem in enumerate(equipment):
                if j == 1:
                    item = QtWidgets.QTableWidgetItem()
                    item.setFlags(QtCore.Qt.ItemFlag.ItemIsUserCheckable |
                                QtCore.Qt.ItemFlag.ItemIsEnabled)
                    if elem == 1:
                        item.setCheckState(QtCore.Qt.CheckState.Checked)
                    else:
                        item.setCheckState(QtCore.Qt.CheckState.Unchecked)
                    self.tableWidget.setItem(i, j, item)
                else:
                    self.tableWidget.setItem(i, j, QtWidgets.QTableWidgetItem(str(elem)))
        self.tableWidget.resizeColumnsToContents()

    def apply(self):
        for i in range(self.tableWidget.rowCount()):
            id = self.tableWidget.item(i,0).text()
            if self.tableWidget.item(i,1).checkState() == QtCore.Qt.CheckState.Checked:
                database.update_mred((1,int(id)))
            else:
                database.update_mred((0,int(id)))
                


if __name__ == "__main__":
    import sys,os
    import database, parser
    if not os.path.isfile('db.sqlite3'):
        database.start()
        parser.parse()
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
